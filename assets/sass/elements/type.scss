@use 'sass:map';
@use '../_func' as *;

$layers: 'true' !default;
$mobileOnly: 'false' !default;
$darkMode: 'true' !default;

@include layer('elements', $layers) {
  /* Duplicated from bootstrap reboot so that the type file will compile */
  mark {
    padding: $mark-padding;
    background-color: $mark-bg;
  }

  //@import "../../bootstrap/scss/_type.scss";

  // #region headings

  %heading {

    margin-top: 0; // 1
    margin-bottom: 0;
    font-family: $headings-font-family;
    font-style: $headings-font-style;
    font-weight: bold;

    line-height: round(calc(1em * var(--type-scale)),0.25rem);
    padding-bottom: round(calc(1em * var(--type-scale)),0.25rem);
    color: $headings-color;
    clear: both;
    display: block;

    [class*='fa-'] {
      margin-right: 0.5rem;
    }
  }

  @include is('h1, .h1, h2, .h2, h3, .h3, h4, .h4, h5, .h5, h6, .h6,.display-1,.display-2, .display-3, .display-4') {
    @extend %heading;
  }

  :is(.h1, h1) {

    font-size: map.get($heading-sizes, 'h1_fs');
    font-weight: 900;
  }


  :is(h2, .h2) {
    font-size: map.get($heading-sizes, 'h2_fs');
    font-weight: 900;
  }

  :is(h3, .h3) {
    font-size: map.get($heading-sizes, 'h3_fs');
    max-width: var(--content-max-width);

    line-height: round(calc(1em * var(--type-scale)),0.25rem);
    padding-bottom: round(calc(1em * var(--type-scale)),0.25rem);
  }

  :is(.h4, h4, .h5, h5, .h6, h6) {
    font-size: map.get($heading-sizes, 'h4_fs');
    max-width: var(--content-max-width);
    
    line-height: round(calc(1em * var(--type-scale)),0.25rem);
    padding-bottom: round(calc(1em * var(--type-scale)),0.25rem);
  }
  // #endregion

  p {
    margin-top: 0;
    font-size: rem(map.get($heading-sizes, 'body_fs'));
    line-height: rem(map.get($heading-sizes, 'body_lh'));
    padding-bottom: rem(map.get($heading-sizes, 'body_end_pb'));
    max-width: var(--content-max-width);
    margin-bottom: 0;
  }

  p:has(+ p) {
    padding-bottom: rem(map.get($heading-sizes, 'body_pb'));
  }

  :is(.lead, .strapline) {
    font-size: rem(map.get($heading-sizes, 'lead_fs'));
    line-height: rem(map.get($heading-sizes, 'lead_lh'));
    padding-bottom: rem(map.get($heading-sizes, 'lead_pb'));
    max-width: var(--content-max-width);
    font-weight: 700;
  }

  small,
  .small {
    font-size: rem(map.get($heading-sizes, 'small_fs'));
    line-height: rem(map.get($heading-sizes, 'small_lh'));
    padding-bottom: rem(map.get($heading-sizes, 'small_pb'));
    max-width: var(--content-max-width);
    font-family: arial, sans-serif;
    font-weight: normal;
  }

  sub,
  sup {
    position: relative;
    font-size: 0.75em;
    line-height: 0;
    vertical-align: baseline;
  }

  sub {
    bottom: -0.25em;
  }
  sup {
    top: -0.5em;
  }

  abbr[title] {
    text-decoration: underline dotted; // 1
    cursor: help; // 2
    text-decoration-skip-ink: none; // 3
  }

  strong {
    font-weight: bolder;
    font-family: var(--font-heading);
    color: var(--colour-heading);
  }

  // Address

  address {
    margin-bottom: 1rem;
    font-style: normal;
    line-height: inherit;
  }

  blockquote {
  }

  blockquote {
    margin: 0;
    quotes: '“' '”' '‘' '’';
    padding-bottom: rem(48);
    overflow: hidden;

    p {
      font-size: rem(24);
      line-height: rem(32);
      padding-bottom: 0;
    }

    & p:first-child:before {
      content: open-quote;
    }
    & p:last-of-type:after {
      content: close-quote;
    }

    cite {
      font-size: rem(18);
      line-height: rem(32);
      padding-bottom: 0;
      font-weight: bold;
      font-style: normal;
    }
  }

  .stat {
    font-size: rem(64);
    line-height: rem(72);
    font-weight: bold;
    color: $headings-color;
    display: block;

    text-decoration: underline;
    text-underline-offset: 0.75rem;
    text-decoration-color: var(--colour-secondary);
    text-decoration-thickness: rem(4);
    margin-bottom: rem(64);
  }
}
