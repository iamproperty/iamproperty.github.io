@use 'sass:map';
@use '../_func.scss' as *;

/* Duplicated from bootstrap reboot so that the type file will compile */
mark {
  padding: $mark-padding;
  background-color: $mark-bg;
}

//@import "../../bootstrap/scss/_type.scss";

// #region headings

%heading {
  --line-height: #{$headings-line-height};
  // From bootstrap reboot
  margin-top: 0; // 1
  margin-bottom: $headings-margin-bottom;
  font-family: $headings-font-family;
  font-style: $headings-font-style;
  font-weight: bold;
  line-height: var(--line-height);
  color: $headings-color;
  // END:Bootstap reboot
  clear: both;
  display: block;
  padding-bottom: 2rem;

  [class*='fa-'] {
    margin-right: 0.5rem;
  }
}

@include is('h1, .h1, h2, .h2, h3, .h3, h4, .h4, h5, .h5, h6, .h6,.display-1,.display-2, .display-3, .display-4') {
  @extend %heading;
}

:is(.h1, h1) {
  --line-height: #{rem(map-get($heading-sizes, 'h1_lh'))};

  font-size: rem(map-get($heading-sizes, 'h1_fs'));
  padding-bottom: rem(map-get($heading-sizes, 'h1_pb'));
  font-weight: 900;

  @include media-breakpoint-up(sm) {
    font-size: rem(map-get($heading-sizes, 'h1_fs_sm'));
    --line-height: #{rem(map-get($heading-sizes, 'h1_lh_sm'))};
    padding-bottom: rem(map-get($heading-sizes, 'h1_pb_sm'));
  }
}

:is(h2, .h2) {
  font-size: rem(map-get($heading-sizes, 'h2_fs'));
  --line-height: #{rem(map-get($heading-sizes, 'h2_lh'))};
  padding-bottom: rem(map-get($heading-sizes, 'h1_pb'));
  font-weight: 900;

  @include media-breakpoint-up(sm) {
    font-size: rem(map-get($heading-sizes, 'h2_fs_sm'));
    --line-height: #{rem(map-get($heading-sizes, 'h2_lh_sm'))};
    padding-bottom: rem(map-get($heading-sizes, 'h2_pb_sm'));
  }
}

:is(h3, .h3) {
  font-size: rem(map-get($heading-sizes, 'h3_fs'));
  --line-height: #{rem(map-get($heading-sizes, 'h3_lh'))};
  padding-bottom: rem(map-get($heading-sizes, 'h3_pb'));
  max-width: var(--content-max-width);
  font-weight: 900;

  @include media-breakpoint-up(sm) {
    font-size: rem(map-get($heading-sizes, 'h3_fs_sm'));
    --line-height: #{rem(map-get($heading-sizes, 'h3_lh_sm'))};
    padding-bottom: rem(map-get($heading-sizes, 'h3_pb_sm'));
  }
}

:is(.h4, h4, .h5, h5, .h6, h6) {
  font-size: rem(map-get($heading-sizes, 'h4_fs'));
  --line-height: #{rem(map-get($heading-sizes, 'h4_lh'))};
  padding-bottom: rem(map-get($heading-sizes, 'h4_pb'));
  max-width: var(--content-max-width);

  /* The values for mobile and tablet are exactly the same, but if that changes this block needs to be re-instated 
  @include media-breakpoint-up(sm) {

    font-size: rem(map-get($heading-sizes,"h4_fs_sm"));
    line-height: rem(map-get($heading-sizes,"h4_lh_sm"));
    padding-bottom: rem(map-get($heading-sizes,"h4_pb_sm"));
  }
  */
}
// #endregion

p {
  margin-top: 0;
  font-size: rem(map-get($heading-sizes, 'body_fs'));
  line-height: rem(map-get($heading-sizes, 'body_lh'));
  padding-bottom: rem(map-get($heading-sizes, 'body_end_pb'));
  max-width: var(--content-max-width);
  margin-bottom: 0;
}

p:has(+ p) {
  padding-bottom: rem(map-get($heading-sizes, 'body_pb'));
}

:is(.lead, .strapline) {
  font-size: rem(map-get($heading-sizes, 'lead_fs'));
  line-height: rem(map-get($heading-sizes, 'lead_lh'));
  padding-bottom: rem(map-get($heading-sizes, 'lead_pb'));
  max-width: var(--content-max-width);
  font-weight: 700;
}

small,
.small {
  font-size: rem(map-get($heading-sizes, 'small_fs'));
  line-height: rem(map-get($heading-sizes, 'small_lh'));
  padding-bottom: rem(map-get($heading-sizes, 'small_pb'));
  max-width: var(--content-max-width);
  font-family: arial, sans-serif;
  font-weight: normal;
}

sub,
sup {
  position: relative;
  font-size: 0.75em;
  line-height: 0;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}
sup {
  top: -0.5em;
}

abbr[title] {
  text-decoration: underline dotted; // 1
  cursor: help; // 2
  text-decoration-skip-ink: none; // 3
}

// Address

address {
  margin-bottom: 1rem;
  font-style: normal;
  line-height: inherit;
}

blockquote {
}

blockquote {
  margin: 0;
  quotes: '“' '”' '‘' '’';
  padding-bottom: rem(48);
  overflow: hidden;

  p {
    font-size: rem(24);
    line-height: rem(32);
    padding-bottom: 0;
  }

  & p:first-child:before {
    content: open-quote;
  }
  & p:last-of-type:after {
    content: close-quote;
  }

  cite {
    font-size: rem(18);
    line-height: rem(32);
    padding-bottom: 0;
    font-weight: bold;
    font-style: normal;
  }
}

.stat {
  font-size: rem(64);
  line-height: rem(72);
  font-weight: bold;
  color: $headings-color;
  display: block;

  text-decoration: underline;
  text-underline-offset: 0.75rem;
  text-decoration-color: var(--colour-secondary);
  text-decoration-thickness: rem(4);
  margin-bottom: rem(64);
}
