@use '../../assets/sass/_func.scss' as *;

// Utility generator
// Used to generate utilities & print utilities
@mixin print-utility($utility, $infix, $is-rfs-media-query: false) {
  $values: map-get($utility, values);

  // If the values are a list or string, convert it into a map
  @if type-of($values) == 'string' or (length($values) != 0 and type-of(nth($values, 1)) != 'list') {
    $values: zip($values, $values);
  }

  @each $key, $value in $values {
    $properties: map-get($utility, property);

    // Multiple properties are possible, for example with vertical or horizontal margins or paddings
    @if type-of($properties) == 'string' {
      $properties: append((), $properties);
    }

    // Use custom class if present
    $property-class: if(map-has-key($utility, class), map-get($utility, class), nth($properties, 1));
    $property-class: if($property-class == null, '', $property-class);

    // State params to generate pseudo-classes
    $state: if(map-has-key($utility, state), map-get($utility, state), ());

    $infix: if($property-class == '' and str-slice($infix, 1, 1) == '-', str-slice($infix, 2), $infix);

    // Don't prefix if value key is null (eg. with shadow class)
    $property-class-modifier: if($key, if($property-class == '' and $infix == '', '', '-') + $key, '');

    @if map-get($utility, rfs) {
      // Inside the media query
      @if $is-rfs-media-query {
        $val: rfs-value($value);

        // Do not render anything if fluid and non fluid values are the same
        $value: if($val == rfs-fluid-value($value), null, $val);
      } @else {
        $value: rfs-fluid-value($value);
      }
    }

    $is-rtl: map-get($utility, rtl);

    @if $value != null {
      @if $is-rtl == false {
        /* rtl:begin:remove */
      }

      $string: '';
      @each $property in $properties {
        $string: $string +#{$property}+ ': ' + $value + if($enable-important-utilities, '!important;\\n', ';\\n');
      }
      --ut-#{$property-class + $infix + $property-class-modifier}: '#{$string}';

      @each $pseudo in $state {
        $string: '';
        @each $property in $properties {
          $string: $string +#{$property}+ ': ' + $value + if($enable-important-utilities, '!important;\\n', ';\\n');
        }
        --ut-#{$property-class + $infix + $property-class-modifier}-#{$pseudo}: '#{$string}; ';
      }

      @if $is-rtl == false {
        /* rtl:end:remove */
      }
    }
  }
}

// Export the SCSS vars
:export {
  // Headings
  @each $var, $value in $heading-sizes {
    #{$var}: #{$value};
  }

  @each $var, $value in $heading-sizes {
    #{$var}_rem: #{rem($value)};
  }

  text_mw: $content-max-width-px;
  text_mw_rem: $content-max-width;
  table_padding_px: $table-padding-px;
  table_padding: $table-padding;

  td_mw_px: $td-mw-px;
  td_mw: $td-mw;

  ut_mh_sm_px: $ut-mh-sm-px;
  ut_mh_sm: $ut-mh-sm;
  ut_mh_md_px: $ut-mh-md-px;
  ut_mh_md: $ut-mh-md;
  ut_mh_lg_px: $ut-mh-lg-px;
  ut_mh_lg: $ut-mh-lg;

  @each $color, $value in $theme-colors {
    themeColour_#{$color}: #{$value};
  }
  @each $color, $value in $non-theme-colors {
    nonThemeColour_#{$color}: #{$value};
  }
  @each $color, $value in $dark-mode-colors {
    darkModeColour_#{$color}: #{$value};
  }
  @each $color, $value in $dark-mode-functional-colors {
    darkModeFunctionalColour_#{$color}: #{$value};
  }
  @each $color, $value in $wider-colours {
    widerColour_#{$color}: #{$value};
  }
  @each $color, $value in $wider-colours-hover {
    widerColourHover_#{$color}: #{$value};
  }

  @each $color, $value in $wider-colours-active {
    widerColourActive_#{$color}: #{$value};
  }

  @each $var, $value in $vars {
    #{str-replace($var,'-','_')}: #{$value};
  }
  @each $var, $value in $varsMD {
    #{str-replace($var,'-','_')}_md: #{$value};
  }
  heading_lh: $headings-line-height;
  heading_mb: $headings-margin-bottom;
  @each $breakpoint in map-keys($grid-breakpoints) {
    // Generate media query if needed

    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    // Loop over each utility property
    @each $key, $utility in $utilities {
      // The utility can be disabled with `false`, thus check if the utility is a map first
      // Only proceed if responsive media queries are enabled or if it's the base media query
      @if type-of($utility) == 'map' and (map-get($utility, responsive) or $infix == '') {
        @include print-utility($utility, $infix);
      }
      @if type-of($utility) == 'map' and map-get($utility, print) == true {
        @include print-utility($utility, '-print');
      }
    }
  }
  @each $key, $ratio in $aspect-ratios {
    aspect-ratio-#{$key}: #{$ratio};
  }

  @each $key, $details in $new_utilities {
    -ut-mixin-#{$key}: #{$details};
  }
}
